"""
# By submitting this assignment, I agree to the following:
#  “Aggies do not lie, cheat, or steal, or tolerate those who do”
#  “I have not given or received any unauthorized aid on this assignment”
# 
# Names: 		Erwin Luevano
#               Cedar Maxwell
#               Alex Torres
#               Muhammad Amer 
# Section:		ENGR 102-537
# Assignment:	Game project
# Date:		    01 12 2019

"""
import random as r
import numpy as np


###############################################################################################################
def coord():
	pass
# need to see what functions are connected and create user input and computer input
###############################################################################################################
def cedar_comp():
	dict_directions = {1:'y' ,2:'n'} # changed to y or n because if anything was placed into bool == True
	y = r.randrange(1,11)
	x = r.randrange(1,11)
	direction = dict_directions[r.randint(1,2)]
	return y,x,direction
	


###############################################################################################################
def end(player):
	"""
	
	param: player ~ place the graph of opponent
	
	Checks to see if player has won the match
	
	"""
	a = 0 # counts pieces left
	# Loops through board checking if their are still pieces of opponents ship
	for i in player: #cbdsp
		for t in i:
			if t == 'C':
				a += 1
			elif t == 'B':
				a += 1
			elif t == 'D':
				a += 1
			elif t == 'S':
				a += 1
			elif t == 'P':
				a += 1	
	if a == 0:
			print('you won the game!!!')
			return True
	return False
###############################################################################################################		
def moves(num,coord):  
	"""
	
	param: num ~ number of game loop
	param: coord~ coordinate of attack
	
	Will attack opponents board and if players move is a hit will leave a 'X' and if a miss 'O'
	After each players turn will show players board and attack board to see if they hit their opponent and 
		how many times player has been hit 
	
	"""
	# Resets/creates variables
	if coord[0] == 0 or coord[1] == 0:
		return False
	player = None
	oppos = None
	yours = None
	you = None
	name = None
	if num %2==1: # if player 1 turn will use their variables
		player, oppos, yours, you, name = player_2, opponents_2, player_1, 'player 1', 'player 2' # player 2 variable
	else: # if player 2 turn will use player two variables
		player, oppos, yours, you, name = player_1, opponents_1, player_2, 'player 2', 'player 1' # player 2 vairable
	# checks if ship is there and if position has not been hit yet and then marks area as hit/miss with 'X' and 'O' in coordinate of attack
	if player[coord[0]][coord[1]] != '.' and player[coord[0]][coord[1]]!= 'O' and player[coord[0]][coord[1]] != 'X': 
		oppos[coord[0]][coord[1]] = 'X' 
		player[coord[0]][coord[1]] = 'X'
		# prints graph after attacks
		print('your attacks on',name)
		for i in oppos:
			print(*i,sep='  ')
		print(you)
		for i in yours:
			print(*i,sep='  ')
	elif player[coord[0]][coord[1]] == '.' and player[coord[0]][coord[1]] != 'O' and player[coord[0]][coord[1]] != 'X':
		player[coord[0]][coord[1]] = 'O'
		oppos[coord[0]][coord[1]] = 'O'
		# prints graph after attacks
		print('your attacks on',name)
		for i in oppos:
			print(*i,sep='  ')
		print(you)
		for i in yours:
			print(*i,sep='  ')
	# if the spot has been hit then user is able to enter coordinates till they are accepted
	else:
		return False
	
###############################################################################################################
def correct_move(num,coord): # makes sure move is allowed 
	l = None
	l = moves(num,coord)   
	# loops until acceptable attack is entered
	while l == False:
		print('You already hit there! Look at your hit sheet and choose another area.')
		coord = np.array(input('Enter the coordinates of your attack Ex:(1,2): ').split(','),dtype = int)
		l = moves(num,coord)
###############################################################################################################

def set_tile(board,location,char):
	board[location[0]][location[1]] = char
###############################################################################################################
def place_ship(board,location_origin,length,vertical):
    #location: tuple of coordinates of top of ship
    #length: int to represent length of ship
    #vertical: bool is true if ship is vertical
    #place_ship returns False if placement is invalid

	#place_ship will place partial ships if they leave the board boundaries
    label = {5:'C',4:'B',3:'S',2:'P'} # 3 and 3
    ship = label[length]
    x = 0
    y = 0

    location = location_origin
    for i in range(length):
        location = (location_origin[0]+x,location_origin[1]+y)
        set_tile(board,location,ship)
        if vertical == 'Y' or vertical == 'y':
            x += 1
        else:
            y += 1
		


		
###############################################################################################################	
def rules_c(player,coordinate,lent,vert):

    dict_tr = {'Y','y','N','n'}
    if vert not in dict_tr:
        return False
    if player[coordinate[0]][coordinate[1]] != '.':
        return False
    x = 0
    y = 0
    if vert == 'y' or vert == 'Y':
        if coordinate[0] + length <= 10:
            for i in range(length):
                if player[coordinate[0]+x][coordinate[1]] != '.':
                    return False
                x += 1
        else: 
            return False
    else:
        if coordinate[1] + length <= 10:
            for i in range(length):
                if player[coordinate[0]][coordinate[1]+y] != '.':
                    return False
                y += 1
        else: 
            return False 
    return True
###############################################################################################################
def placement_c(player,coordinate,lent,vert): # works with erwins idea of code
	var = rules_c(player,coordinate,lent,vert)
	while var == False:
		print('You didnt enter a correct placement try again.')
		coordinate = np.array(input('Enter the coordinate Ex:(1,2): ').split(','),dtype = int)
		vert = input('Enter if the ship will be vertical. Enter:(y or n)')
		var = rules_c(player,coordinate,lent,vert)
	return coordinate,vert
###############################################################################################################
	
for num in range(1,203): # loops through game until someone wins or all spaces have been used 
###############################################################################################################
	if num ==1 : # player 1 board 
		opponents_2 =[[' ','1','2','3','4','5','6','7','8','9','0'],
				      ['1','.','.','.','.','.','.','.','.','.','.'],
	                  ['2','.','.','.','.','.','.','.','.','.','.'],
	                  ['3','.','.','.','.','.','.','.','.','.','.'],
	                  ['4','.','.','.','.','.','.','.','.','.','.'],
	                  ['5','.','.','.','.','.','.','.','.','.','.'],
	                  ['6','.','.','.','.','.','.','.','.','.','.'],
	                  ['7','.','.','.','.','.','.','.','.','.','.'],
	                  ['8','.','.','.','.','.','.','.','.','.','.'],
	                  ['9','.','.','.','.','.','.','.','.','.','.'],
			          ['0','.','.','.','.','.','.','.','.','.','.']]
		
		print('player 2')
		player_1 =   [[' ','1','2','3','4','5','6','7','8','9','0'],
				      ['1','.','.','.','.','.','.','.','.','.','.'],
	                  ['2','.','.','.','.','.','.','.','.','.','.'],
	                  ['3','.','.','.','.','.','.','.','.','.','.'],
	                  ['4','.','.','.','.','.','.','.','.','.','.'],
	                  ['5','.','.','.','.','.','.','.','.','.','.'],
	                  ['6','.','.','.','.','.','.','.','.','.','.'],
	                  ['7','.','.','.','.','.','.','.','.','.','.'],
	                  ['8','.','.','.','.','.','.','.','.','.','.'],
	                  ['9','.','.','.','.','.','.','.','.','.','.'],
			          ['0','.','.','.','.','.','.','.','.','.','.']]
		
		for i in opponents_2: #prints out layout of board 
			print(*i, sep ='  ')
		print('player 1')
		for i in player_1:
			print(*i, sep = '  ')		
 		# player sets up their board by placing their ships
		##### cedars ship placement
		length_dict = {0:[5,'Carrier'],1:[4,'Battleship'],2:[3,'Submarine'],3:[3,'Destroyer'],4:[2,'Patrol Boat']}
		for i in range(5):
			vertical = None
			length, name = length_dict[i]
			print('The',name,'takes up',length,'spaces.' )
			coordinate = np.array(input('Enter the coordinate Ex:(1,2): ').split(','),dtype = int)
			vertical = input('Enter if the ship will be vertical. Enter:(True or False)')
			coordinate,vertical = placement_c(player_1,coordinate,length,vertical)
			place_ship(player_1,coordinate,length,vertical)
		# prints players board to see their finished result
			print('Your attack board')
			for i in opponents_2:
				print(*i,sep='  ')
			print('Player 1')
			for i in player_1:
				print(*i,sep= '  ')
		ready = input('Ready to switch? press Enter!')
		print(10*'\n')
		# does not move on until user is ready
		switch = input('If you have swtiched say yes:')
		print(10*'\n')
###############################################################################################################
	elif num == 2:
		opponents_1 =[[' ','1','2','3','4','5','6','7','8','9','0'],
				      ['1','.','.','.','.','.','.','.','.','.','.'],
	                  ['2','.','.','.','.','.','.','.','.','.','.'],
	                  ['3','.','.','.','.','.','.','.','.','.','.'],
	                  ['4','.','.','.','.','.','.','.','.','.','.'],
	                  ['5','.','.','.','.','.','.','.','.','.','.'],
	                  ['6','.','.','.','.','.','.','.','.','.','.'],
	                  ['7','.','.','.','.','.','.','.','.','.','.'],
	                  ['8','.','.','.','.','.','.','.','.','.','.'],
	                  ['9','.','.','.','.','.','.','.','.','.','.'],
			          ['0','.','.','.','.','.','.','.','.','.','.']]
		
		print('player 1')
		player_2 =   [[' ','1','2','3','4','5','6','7','8','9','0'],
				      ['1','.','.','.','.','.','.','.','.','.','.'],
	                  ['2','.','.','.','.','.','.','.','.','.','.'],
	                  ['3','.','.','.','.','.','.','.','.','.','.'],
	                  ['4','.','.','.','.','.','.','.','.','.','.'],
	                  ['5','.','.','.','.','.','.','.','.','.','.'],
	                  ['6','.','.','.','.','.','.','.','.','.','.'],
	                  ['7','.','.','.','.','.','.','.','.','.','.'],
	                  ['8','.','.','.','.','.','.','.','.','.','.'],
	                  ['9','.','.','.','.','.','.','.','.','.','.'],
			          ['0','.','.','.','.','.','.','.','.','.','.']]
		
		for i in opponents_1: #prints out layout of game board before every move
			print(*i, sep ='  ')
		print('player 2')
		for i in player_2:
			print(*i, sep = '  ')		

		# thinking of printing out the graph everytime so the person sees where they placed their ships
		# or would it be too much printing????????
		# player sets up their board by placing their ships
		length_dict = {0:[5,'Carrier'],1:[4,'Battleship'],2:[3,'Submarine'],3:[3,'Destroyer'],4:[2,'Patrol Boat']}
		for i in range(5):
			length, name = length_dict[i]
			print('The',name,'takes up',length,'spaces.' )			
			coordinate = np.array(input('Enter the coordinate Ex:(1,2): ').split(','),dtype = int)
			vertical = bool(input('Enter if the ship will be vertical. Enter:(True or False)'))
			coordinate,vertical = placement_c(player_2,coordinate,length,vertical)
			place_ship(player_1,coordinate,length,vertical)
			print('player 1')
			for i in opponents_1:
				print(*i,sep='  ')
			print('Player_2')
			for i in player_2:
				print(*i,sep='  ')
		ready = input('Ready to switch? press Enter!')
		print(10*'\n')
		# does not move on until user is ready
		switch = input('If you have swtiched say yes:')
		print(10*'\n')
###############################################################################################################	
	# Player 1 turn to attack		
	elif num != 1 and num %2==1:
		print('your attacks on player 2')
		for i in opponents_2:
			print(*i,sep='  ')
		print('player 1')
		for i in player_1:
			print(*i,sep='  ')
		print('Player 1 it is your turn!')
		coord = np.array(input('Enter the coordinates of your attack Ex:(1,2): ').split(','),dtype = int)
		correct_move(num,coord)
		# checks if player 1 has won
		if end(player_2):
			break
		# allows user to see board after attack
		user = input('See if you hit or missed and press enter for player twos turn!')
		print(10*'\n')
		# does not move on until user is ready
		switch = input('If you have swtiched say yes:')
		print(10*'\n')
###############################################################################################################		
	# player 2 turn to attack
	elif num !=2 and num %2==0:	
		print('your attacks on player 1')
		for i in opponents_1:
			print(*i,sep='  ')
		print('player 2')
		for i in player_2:
			print(*i,sep='  ')
		print('Player 2 it is your turn!')
		coord = np.array(input('Enter the coordinates of your attack Ex:(1,2): ').split(','),dtype = int)
		correct_move(num,coord)
		# checks if player 2 has won
		if end(player_1):
			break
		user = input('See if you hit or missed and press enter for player twos turn!')
		print(10*'\n')
		# does not move on until user is ready
		switch = input('If you have swtiched say yes:')
		print(10*'\n')
		
		
		
		
		
		
		
		
		
